/*
 * Italian eInvoice API
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.invoicetronic.invoice.sdk.api;

import com.invoicetronic.invoice.sdk.ApiCallback;
import com.invoicetronic.invoice.sdk.ApiClient;
import com.invoicetronic.invoice.sdk.ApiException;
import com.invoicetronic.invoice.sdk.ApiResponse;
import com.invoicetronic.invoice.sdk.Configuration;
import com.invoicetronic.invoice.sdk.Pair;
import com.invoicetronic.invoice.sdk.ProgressRequestBody;
import com.invoicetronic.invoice.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.invoicetronic.invoice.sdk.model.FatturaOrdinaria;
import java.io.File;
import java.time.OffsetDateTime;
import com.invoicetronic.invoice.sdk.model.ProblemHttpResult;
import com.invoicetronic.invoice.sdk.model.Send;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoiceV1SendFilesPost
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendFilesPostCall(List<File> files, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendFilesPostValidateBeforeCall(List<File> files, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling invoiceV1SendFilesPost(Async)");
        }

        return invoiceV1SendFilesPostCall(files, validate, signature, _callback);

    }

    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendFilesPost(List<File> files, Boolean validate, String signature) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendFilesPostWithHttpInfo(files, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendFilesPostWithHttpInfo(List<File> files, Boolean validate, String signature) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendFilesPostValidateBeforeCall(files, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by file (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendFilesPostAsync(List<File> files, Boolean validate, String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendFilesPostValidateBeforeCall(files, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendGet
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendGetCall(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (committente != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("committente", committente));
        }

        if (prestatore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestatore", prestatore));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        if (lastUpdateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_from", lastUpdateFrom));
        }

        if (lastUpdateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_to", lastUpdateTo));
        }

        if (dateSentFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_from", dateSentFrom));
        }

        if (dateSentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_to", dateSentTo));
        }

        if (documentDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_from", documentDateFrom));
        }

        if (documentDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_to", documentDateTo));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_number", documentNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendGetValidateBeforeCall(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return invoiceV1SendGetCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, _callback);

    }

    /**
     * List invoices
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @return List&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Send> invoiceV1SendGet(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Send>> localVarResp = invoiceV1SendGetWithHttpInfo(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List invoices
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Send&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Send>> invoiceV1SendGetWithHttpInfo(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List invoices (asynchronously)
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendGetAsync(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback<List<Send>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendIdGet
     * @param id Item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceV1SendIdGet(Async)");
        }

        return invoiceV1SendIdGetCall(id, _callback);

    }

    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id (required)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendIdGet(Integer id) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id (required)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a invoice by id (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendIdGetAsync(Integer id, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendJsonPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendJsonPostCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendJsonPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendJsonPost(Async)");
        }

        return invoiceV1SendJsonPostCall(fatturaOrdinaria, validate, signature, _callback);

    }

    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendJsonPost(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendJsonPostWithHttpInfo(fatturaOrdinaria, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by json (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendPost
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendPostCall(Send send, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = send;

        // create path and map variables
        String localVarPath = "/invoice/v1/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendPostValidateBeforeCall(Send send, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'send' is set
        if (send == null) {
            throw new ApiException("Missing the required parameter 'send' when calling invoiceV1SendPost(Async)");
        }

        return invoiceV1SendPostCall(send, validate, signature, _callback);

    }

    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendPost(Send send, Boolean validate, String signature) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendPostWithHttpInfo(send, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendPostWithHttpInfo(Send send, Boolean validate, String signature) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendPostValidateBeforeCall(send, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendPostAsync(Send send, Boolean validate, String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendPostValidateBeforeCall(send, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendValidateFilesPost
     * @param files  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateFilesPostCall(List<File> files, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/validate/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendValidateFilesPostValidateBeforeCall(List<File> files, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling invoiceV1SendValidateFilesPost(Async)");
        }

        return invoiceV1SendValidateFilesPostCall(files, _callback);

    }

    /**
     * Validate an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void invoiceV1SendValidateFilesPost(List<File> files) throws ApiException {
        invoiceV1SendValidateFilesPostWithHttpInfo(files);
    }

    /**
     * Validate an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> invoiceV1SendValidateFilesPostWithHttpInfo(List<File> files) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendValidateFilesPostValidateBeforeCall(files, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice by file (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateFilesPostAsync(List<File> files, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendValidateFilesPostValidateBeforeCall(files, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendValidateJsonPost
     * @param fatturaOrdinaria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateJsonPostCall(FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/validate/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendValidateJsonPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendValidateJsonPost(Async)");
        }

        return invoiceV1SendValidateJsonPostCall(fatturaOrdinaria, _callback);

    }

    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void invoiceV1SendValidateJsonPost(FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        invoiceV1SendValidateJsonPostWithHttpInfo(fatturaOrdinaria);
    }

    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> invoiceV1SendValidateJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendValidateJsonPostValidateBeforeCall(fatturaOrdinaria, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice by json (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendValidateJsonPostValidateBeforeCall(fatturaOrdinaria, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendValidatePost
     * @param send  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidatePostCall(Send send, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = send;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendValidatePostValidateBeforeCall(Send send, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'send' is set
        if (send == null) {
            throw new ApiException("Missing the required parameter 'send' when calling invoiceV1SendValidatePost(Async)");
        }

        return invoiceV1SendValidatePostCall(send, _callback);

    }

    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void invoiceV1SendValidatePost(Send send) throws ApiException {
        invoiceV1SendValidatePostWithHttpInfo(send);
    }

    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> invoiceV1SendValidatePostWithHttpInfo(Send send) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendValidatePostValidateBeforeCall(send, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidatePostAsync(Send send, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendValidatePostValidateBeforeCall(send, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendValidateXmlPost
     * @param fatturaOrdinaria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateXmlPostCall(FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/validate/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendValidateXmlPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendValidateXmlPost(Async)");
        }

        return invoiceV1SendValidateXmlPostCall(fatturaOrdinaria, _callback);

    }

    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void invoiceV1SendValidateXmlPost(FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        invoiceV1SendValidateXmlPostWithHttpInfo(fatturaOrdinaria);
    }

    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> invoiceV1SendValidateXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendValidateXmlPostValidateBeforeCall(fatturaOrdinaria, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice by xml (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendValidateXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendValidateXmlPostValidateBeforeCall(fatturaOrdinaria, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendXmlPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendXmlPostCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendXmlPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendXmlPost(Async)");
        }

        return invoiceV1SendXmlPostCall(fatturaOrdinaria, validate, signature, _callback);

    }

    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendXmlPost(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendXmlPostWithHttpInfo(fatturaOrdinaria, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by xml (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, Boolean validate, String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
