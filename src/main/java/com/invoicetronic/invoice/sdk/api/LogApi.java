/*
 * Italian eInvoice API
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.invoicetronic.invoice.sdk.api;

import com.invoicetronic.invoice.sdk.ApiCallback;
import com.invoicetronic.invoice.sdk.ApiClient;
import com.invoicetronic.invoice.sdk.ApiException;
import com.invoicetronic.invoice.sdk.ApiResponse;
import com.invoicetronic.invoice.sdk.Configuration;
import com.invoicetronic.invoice.sdk.Pair;
import com.invoicetronic.invoice.sdk.ProgressRequestBody;
import com.invoicetronic.invoice.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.invoicetronic.invoice.sdk.model.Event;
import java.time.OffsetDateTime;
import com.invoicetronic.invoice.sdk.model.ProblemHttpResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoiceV1LogGet
     * @param companyId Company id (optional)
     * @param endpoint  (optional)
     * @param method  (optional)
     * @param apiVerion Api version (optional)
     * @param statusCode Response status code (optional)
     * @param dateCreatedFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateCreatedTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1LogGetCall(Integer companyId, String endpoint, String method, Integer apiVerion, Integer statusCode, OffsetDateTime dateCreatedFrom, OffsetDateTime dateCreatedTo, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint", endpoint));
        }

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        if (apiVerion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_verion", apiVerion));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code", statusCode));
        }

        if (dateCreatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_from", dateCreatedFrom));
        }

        if (dateCreatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_to", dateCreatedTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1LogGetValidateBeforeCall(Integer companyId, String endpoint, String method, Integer apiVerion, Integer statusCode, OffsetDateTime dateCreatedFrom, OffsetDateTime dateCreatedTo, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return invoiceV1LogGetCall(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, _callback);

    }

    /**
     * List events
     * Every API operation is logged and can be retrieved here.
     * @param companyId Company id (optional)
     * @param endpoint  (optional)
     * @param method  (optional)
     * @param apiVerion Api version (optional)
     * @param statusCode Response status code (optional)
     * @param dateCreatedFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateCreatedTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Event> invoiceV1LogGet(Integer companyId, String endpoint, String method, Integer apiVerion, Integer statusCode, OffsetDateTime dateCreatedFrom, OffsetDateTime dateCreatedTo, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Event>> localVarResp = invoiceV1LogGetWithHttpInfo(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List events
     * Every API operation is logged and can be retrieved here.
     * @param companyId Company id (optional)
     * @param endpoint  (optional)
     * @param method  (optional)
     * @param apiVerion Api version (optional)
     * @param statusCode Response status code (optional)
     * @param dateCreatedFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateCreatedTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Event>> invoiceV1LogGetWithHttpInfo(Integer companyId, String endpoint, String method, Integer apiVerion, Integer statusCode, OffsetDateTime dateCreatedFrom, OffsetDateTime dateCreatedTo, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1LogGetValidateBeforeCall(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List events (asynchronously)
     * Every API operation is logged and can be retrieved here.
     * @param companyId Company id (optional)
     * @param endpoint  (optional)
     * @param method  (optional)
     * @param apiVerion Api version (optional)
     * @param statusCode Response status code (optional)
     * @param dateCreatedFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateCreatedTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1LogGetAsync(Integer companyId, String endpoint, String method, Integer apiVerion, Integer statusCode, OffsetDateTime dateCreatedFrom, OffsetDateTime dateCreatedTo, Integer page, Integer pageSize, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1LogGetValidateBeforeCall(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1LogIdGet
     * @param id Item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1LogIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/log/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1LogIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceV1LogIdGet(Async)");
        }

        return invoiceV1LogIdGetCall(id, _callback);

    }

    /**
     * Get an event by id
     * Every API operation is logged and can be retrieved here.
     * @param id Item id (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Event invoiceV1LogIdGet(Integer id) throws ApiException {
        ApiResponse<Event> localVarResp = invoiceV1LogIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an event by id
     * Every API operation is logged and can be retrieved here.
     * @param id Item id (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> invoiceV1LogIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1LogIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an event by id (asynchronously)
     * Every API operation is logged and can be retrieved here.
     * @param id Item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1LogIdGetAsync(Integer id, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1LogIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
