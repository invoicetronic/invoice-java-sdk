/*
 * Italian eInvoice API
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FatturaOrdinaria;
import java.io.File;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.Send;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoiceV1SendFilesPost
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendFilesPostCall(List<File> files, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendFilesPostValidateBeforeCall(List<File> files, Boolean validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling invoiceV1SendFilesPost(Async)");
        }

        return invoiceV1SendFilesPostCall(files, validate, _callback);

    }

    /**
     * Add a send invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendFilesPost(List<File> files, Boolean validate) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendFilesPostWithHttpInfo(files, validate);
        return localVarResp.getData();
    }

    /**
     * Add a send invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendFilesPostWithHttpInfo(List<File> files, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendFilesPostValidateBeforeCall(files, validate, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a send invoice by file (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param files  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendFilesPostAsync(List<File> files, Boolean validate, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendFilesPostValidateBeforeCall(files, validate, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendGet
     * @param companyId Company id. (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente VAT number or fiscal code. (optional)
     * @param prestatore VAT number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendGetCall(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (committente != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("committente", committente));
        }

        if (prestatore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestatore", prestatore));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        if (lastUpdateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_from", lastUpdateFrom));
        }

        if (lastUpdateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_to", lastUpdateTo));
        }

        if (dateSentFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_from", dateSentFrom));
        }

        if (dateSentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_to", dateSentTo));
        }

        if (documentDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_from", documentDateFrom));
        }

        if (documentDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_to", documentDateTo));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_number", documentNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendGetValidateBeforeCall(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return invoiceV1SendGetCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, _callback);

    }

    /**
     * List send invoices
     * test **markdown**.
     * @param companyId Company id. (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente VAT number or fiscal code. (optional)
     * @param prestatore VAT number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. (optional, default to 100)
     * @return List&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Send> invoiceV1SendGet(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Send>> localVarResp = invoiceV1SendGetWithHttpInfo(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List send invoices
     * test **markdown**.
     * @param companyId Company id. (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente VAT number or fiscal code. (optional)
     * @param prestatore VAT number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Send&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Send>> invoiceV1SendGetWithHttpInfo(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List send invoices (asynchronously)
     * test **markdown**.
     * @param companyId Company id. (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente VAT number or fiscal code. (optional)
     * @param prestatore VAT number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendGetAsync(Integer companyId, String identifier, String committente, String prestatore, String fileName, OffsetDateTime lastUpdateFrom, OffsetDateTime lastUpdateTo, OffsetDateTime dateSentFrom, OffsetDateTime dateSentTo, OffsetDateTime documentDateFrom, OffsetDateTime documentDateTo, String documentNumber, Integer page, Integer pageSize, final ApiCallback<List<Send>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendIdGet
     * @param id Item id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceV1SendIdGet(Async)");
        }

        return invoiceV1SendIdGetCall(id, _callback);

    }

    /**
     * Get a send invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id. (required)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendIdGet(Integer id) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a send invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id. (required)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a send invoice by id (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param id Item id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendIdGetAsync(Integer id, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendJsonPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendJsonPostCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendJsonPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendJsonPost(Async)");
        }

        return invoiceV1SendJsonPostCall(fatturaOrdinaria, validate, _callback);

    }

    /**
     * Add a send invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendJsonPost(FatturaOrdinaria fatturaOrdinaria, Boolean validate) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendJsonPostWithHttpInfo(fatturaOrdinaria, validate);
        return localVarResp.getData();
    }

    /**
     * Add a send invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a send invoice by json (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendPost
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendPostCall(Send send, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = send;

        // create path and map variables
        String localVarPath = "/invoice/v1/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendPostValidateBeforeCall(Send send, Boolean validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'send' is set
        if (send == null) {
            throw new ApiException("Missing the required parameter 'send' when calling invoiceV1SendPost(Async)");
        }

        return invoiceV1SendPostCall(send, validate, _callback);

    }

    /**
     * Add a send invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendPost(Send send, Boolean validate) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendPostWithHttpInfo(send, validate);
        return localVarResp.getData();
    }

    /**
     * Add a send invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendPostWithHttpInfo(Send send, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendPostValidateBeforeCall(send, validate, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a send invoice (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendPostAsync(Send send, Boolean validate, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendPostValidateBeforeCall(send, validate, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceV1SendXmlPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendXmlPostCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/invoice/v1/send/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceV1SendXmlPostValidateBeforeCall(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendXmlPost(Async)");
        }

        return invoiceV1SendXmlPostCall(fatturaOrdinaria, validate, _callback);

    }

    /**
     * Add a send invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Send invoiceV1SendXmlPost(FatturaOrdinaria fatturaOrdinaria, Boolean validate) throws ApiException {
        ApiResponse<Send> localVarResp = invoiceV1SendXmlPostWithHttpInfo(fatturaOrdinaria, validate);
        return localVarResp.getData();
    }

    /**
     * Add a send invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> invoiceV1SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = invoiceV1SendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a send invoice by xml (asynchronously)
     * Send invoices are the invoices that are sent to the SDI.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceV1SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, Boolean validate, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceV1SendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
